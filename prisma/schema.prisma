// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String    @unique
    fullname   String?
    email      String?   @unique
    username   String    @unique
    picture    String?
    createdAt  DateTime  @default(now())
    lastSeenAt DateTime? @default(now())

    createdItems Item[]
    outfits      Outfit[]
    likes        OutfitLikes[]
}

model ResolvedItem {
    url      String @unique
    provider String // merchant from Spatula
    brand    String
    title    String
    image    String

    createdAt DateTime @default(now())
}

model Item {
    id          String   @id @default(cuid())
    // WARNING: This should be an enum but Prisma does not support enums for sqlite
    // Item types that are supported: 'head', 'top', 'shoes', 'bottom'
    type        String
    accessory   Boolean
    provider    String // merchant
    url         String   @unique
    brand       String
    title       String
    image       String
    price       Int
    currency    String
    description String?
    userId      String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user    User?         @relation(fields: [userId], references: [id])
    outfits OutfitItems[]
}

model Trend {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Outfit {
    id          Int      @id @default(autoincrement())
    name        String
    code        String   @unique
    description String?
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user  User          @relation(fields: [userId], references: [id])
    items OutfitItems[]
    likes OutfitLikes[]
}

model OutfitItems {
    id        Int      @id @default(autoincrement())
    outfitId  Int
    itemId    String
    createdAt DateTime @default(now())

    outfit Outfit @relation(fields: [outfitId], references: [id])
    item   Item   @relation(fields: [itemId], references: [id])
}

model OutfitLikes {
    id        Int      @id @default(autoincrement())
    outfitId  Int
    userId    String
    createdAt DateTime @default(now())

    outfit Outfit @relation(fields: [outfitId], references: [id])
    user   User   @relation(fields: [userId], references: [id])
}
